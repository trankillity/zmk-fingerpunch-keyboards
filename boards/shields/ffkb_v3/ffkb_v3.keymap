/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

 #include <behaviors.dtsi>
 #include <dt-bindings/zmk/keys.h>
 #include <dt-bindings/zmk/bt.h>
 #include <dt-bindings/zmk/ext_power.h>
 #include <dt-bindings/zmk/outputs.h>
 #include <dt-bindings/zmk/mouse.h>
 #include <dt-bindings/zmk/rgb.h>
 #include <behaviors/mouse_keys.dtsi>
 
#define BASE 0
#define NAVI 1
#define NUMB 2
#define FUNC 3
 
&caps_word {
    continue-list = <UNDERSCORE MINUS>;
};

/ {
    combos {
        compatible = "zmk,combos";
        combo_undo {
            timeout-ms = <50>;
            key-positions = <25 26>;
            bindings = <&kp LC(Z)>;
        };
    };
};

//     _______    _______    _______    _______    _______    _______            _______    _______    _______    _______    _______    _______
//     _______    _______    _______    _______    _______    _______            _______    _______    _______    _______    _______    _______
//     _______    _______    _______    _______    _______    _______            _______    _______    _______    _______    _______    _______
//                           _______    _______    _______    _______            _______    _______    _______    _______

/ {

sensors {
    compatible = "zmk,keymap-sensors";
    sensors = <&encoder_1 &encoder_2>;
    triggers-per-rotation = <20>;
};

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        hs: homerow_shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <120>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
    csemi: comma_semicolon {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp COMMA>, <&kp SEMI>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    dcoln: dot_colon {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp DOT>, <&kp SEMI>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
        keep-mods = <(MOD_RSFT)>;
    };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
        sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN &inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;

        bindings = <
            &kp ESC      &kp Q        &kp W      &kp F        &kp P        &kp B                    &kp J        &kp L        &kp U        &kp Y        &kp SEMI     &kp BSLH
            &kp TAB      &hm LCTL A   &hm LGUI R &hm LALT S   &hs LSHIFT T &kp G                    &kp M        &hs RSHIFT N &hm RALT E   &hm RGUI I   &hm RCTL O   &kp S(TAB)
            &sk LCTL     &kp Z        &kp X      &kp C        &kp D        &kp V                    &kp K        &kp H        &kp COMMA    &kp DOT      &kp FSLH     &kp C(ENTER)
                                      &kp C_MUTE &mo NUMB     &sk LSHIFT   &kp BSPC                 &kp ENTER    &kp SPACE    &mo NAVI     &kp C_MUTE
        >;
        };

        navi_layer {
        sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN &inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;

            bindings = <
            &trans     &kp EXCL     &kp AT       &kp HASH        &kp DLLR         &kp PRCNT                                   &kp CARET     &kp AMPS          &kp ASTRK     &kp UNDER   &kp EQUAL   &trans
            &trans     &kp MINUS    &kp LBKT     &kp LBRC        &kp LPAR         &kp LT                                      &kp GT        &kp RPAR          &kp RBRC      &kp RBKT    &kp PLUS    &trans
            &trans     &kp CAPS     &kp GRAVE    &kp LC(LS(TAB)) &kp LC(LG(LEFT)) &caps_word                                  &trans        &kp LC(LG(RIGHT)) &kp LC(TAB)   &trans      &kp BSLH    &trans
                                                    &trans          &trans           &kp RET       &kp DEL        &kp BSPC       &trans        &trans            &trans
            >;
        };

        numb_layer {
        sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN &inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;

        bindings = <
            &trans     &kp EXCL     &kp AT       &kp HASH        &kp DLLR         &kp PRCNT                                   &kp CARET     &kp AMPS          &kp ASTRK     &kp UNDER   &kp EQUAL   &trans
            &trans     &kp MINUS    &kp LBKT     &kp LBRC        &kp LPAR         &kp LT                                      &kp GT        &kp RPAR          &kp RBRC      &kp RBKT    &kp PLUS    &trans
            &trans     &kp CAPS     &kp GRAVE    &kp LC(LS(TAB)) &kp LC(LG(LEFT)) &caps_word                                  &trans        &kp LC(LG(RIGHT)) &kp LC(TAB)   &trans      &kp BSLH    &trans
                                                    &trans          &trans           &kp RET       &kp DEL        &kp BSPC       &trans        &trans            &trans
        >;
        };

        func_layer {
        sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN &inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;

        bindings = <
            &trans     &bootloader  &kp LS(PG_UP) &kp LS(UP)   &kp LS(PG_DN) &trans                                      &kp C_PLAY_PAUSE &kp F7       &kp F8        &kp F9      &kp F10     &trans
            &trans     &kp LS(HOME) &kp LS(LEFT)  &kp LS(DOWN) &kp LS(RIGHT) &kp LS(END)                                 &kp K_VOL_UP     &kp F4       &kp F5        &kp F6      &kp F11     &trans
            &trans     &trans       &trans        &trans       &trans        &kp C_MUTE                                  &kp K_VOL_DN     &kp F1       &kp F2        &kp F3      &kp F12     &trans
                                                    &trans       &trans        &trans        &trans          &kp SPACE     &trans           &trans       &trans
        >;
        };
    };
};


